// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/spotify.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpotifyServiceClient is the client API for SpotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotifyServiceClient interface {
	GetArtist(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*SpotifyArtist, error)
	GetArtistsForUser(ctx context.Context, in *GetArtistsForUserRequest, opts ...grpc.CallOption) (*GetArtistsForUserResponse, error)
	GetReleasesForArtist(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*GetReleasesResponse, error)
}

type spotifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotifyServiceClient(cc grpc.ClientConnInterface) SpotifyServiceClient {
	return &spotifyServiceClient{cc}
}

func (c *spotifyServiceClient) GetArtist(ctx context.Context, in *GetArtistRequest, opts ...grpc.CallOption) (*SpotifyArtist, error) {
	out := new(SpotifyArtist)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/GetArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceClient) GetArtistsForUser(ctx context.Context, in *GetArtistsForUserRequest, opts ...grpc.CallOption) (*GetArtistsForUserResponse, error) {
	out := new(GetArtistsForUserResponse)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/GetArtistsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceClient) GetReleasesForArtist(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*GetReleasesResponse, error) {
	out := new(GetReleasesResponse)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/GetReleasesForArtist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotifyServiceServer is the server API for SpotifyService service.
// All implementations must embed UnimplementedSpotifyServiceServer
// for forward compatibility
type SpotifyServiceServer interface {
	GetArtist(context.Context, *GetArtistRequest) (*SpotifyArtist, error)
	GetArtistsForUser(context.Context, *GetArtistsForUserRequest) (*GetArtistsForUserResponse, error)
	GetReleasesForArtist(context.Context, *GetReleasesRequest) (*GetReleasesResponse, error)
	mustEmbedUnimplementedSpotifyServiceServer()
}

// UnimplementedSpotifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpotifyServiceServer struct {
}

func (UnimplementedSpotifyServiceServer) GetArtist(context.Context, *GetArtistRequest) (*SpotifyArtist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtist not implemented")
}
func (UnimplementedSpotifyServiceServer) GetArtistsForUser(context.Context, *GetArtistsForUserRequest) (*GetArtistsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtistsForUser not implemented")
}
func (UnimplementedSpotifyServiceServer) GetReleasesForArtist(context.Context, *GetReleasesRequest) (*GetReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleasesForArtist not implemented")
}
func (UnimplementedSpotifyServiceServer) mustEmbedUnimplementedSpotifyServiceServer() {}

// UnsafeSpotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotifyServiceServer will
// result in compilation errors.
type UnsafeSpotifyServiceServer interface {
	mustEmbedUnimplementedSpotifyServiceServer()
}

func RegisterSpotifyServiceServer(s grpc.ServiceRegistrar, srv SpotifyServiceServer) {
	s.RegisterService(&SpotifyService_ServiceDesc, srv)
}

func _SpotifyService_GetArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).GetArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/GetArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).GetArtist(ctx, req.(*GetArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyService_GetArtistsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtistsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).GetArtistsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/GetArtistsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).GetArtistsForUser(ctx, req.(*GetArtistsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyService_GetReleasesForArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).GetReleasesForArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/GetReleasesForArtist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).GetReleasesForArtist(ctx, req.(*GetReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpotifyService_ServiceDesc is the grpc.ServiceDesc for SpotifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpotifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spotify.SpotifyService",
	HandlerType: (*SpotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtist",
			Handler:    _SpotifyService_GetArtist_Handler,
		},
		{
			MethodName: "GetArtistsForUser",
			Handler:    _SpotifyService_GetArtistsForUser_Handler,
		},
		{
			MethodName: "GetReleasesForArtist",
			Handler:    _SpotifyService_GetReleasesForArtist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/spotify.proto",
}
